import csv
import pandas as pd
import re
import os

ROOT_DIR = "scan_result"
SCAN_CVE_DIR = ROOT_DIR + "/cve_scan"

matrices = [
    {"name": "NIST", "low": 0.0, "medium": 4.0, "high": 7.0},
    {"name": "FAIR", "low": 0.0, "medium": 5.0, "high": 9.0},
    {"name": "MITRE", "low": 0.0, "medium": 4.0, "high": 7.0},
    {"name": "Other", "low": 1.0, "medium": 6.0, "high": 8.0},
]

nist_scores = {"low": 0, "medium": 0, "high": 0}
fair_scores = {"low": 0, "medium": 0, "high": 0}
mitre_scores = {"low": 0, "medium": 0, "high": 0}
other_scores = {"low": 0, "medium": 0, "high": 0}


def risk_assessment():
    print("Start risk assessment")
    print("=" * 50)
    with open(SCAN_CVE_DIR + "/" + "scan_result.csv", "r") as f:
        reader = csv.DictReader(f)
        df = pd.read_csv(SCAN_CVE_DIR + "/" + "scan_result.csv")
        print(df)

        for row in reader:
            cve = row["CVE"]
            score = float(row["Score"])

            # Update scores for each matrix
            if score < matrices[0]["medium"]:
                nist_scores["low"] += 1
            elif score < matrices[0]["high"]:
                nist_scores["medium"] += 1
            else:
                nist_scores["high"] += 1

            if score < matrices[1]["medium"]:
                fair_scores["low"] += 1
            elif score < matrices[1]["high"]:
                fair_scores["medium"] += 1
            else:
                fair_scores["high"] += 1

            if score < matrices[2]["medium"]:
                mitre_scores["low"] += 1
            elif score < matrices[2]["high"]:
                mitre_scores["medium"] += 1
            else:
                mitre_scores["high"] += 1

            if score < matrices[3]["medium"]:
                other_scores["low"] += 1
            elif score < matrices[3]["high"]:
                other_scores["medium"] += 1
            else:
                other_scores["high"] += 1

        print(f"{'':20} {'Low':<10} {'Medium':<10} {'High':<10}")

        for matrix in matrices:
            name = matrix["name"]
            low = matrix["low"]
            medium = matrix["medium"]
            high = matrix["high"]

            if name == "NIST":
                scores = nist_scores
            elif name == "FAIR":
                scores = fair_scores
            elif name == "MITRE":
                scores = mitre_scores
            else:
                scores = other_scores

            print(
                f"{name:20} {scores['low']:<10} {scores['medium']:<10} {scores['high']:<10}"
            )


def cve_scan():
    with open(SCAN_CVE_DIR + "/" + "scan_result.csv", "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["CVE", "Score"])
        list_dir = os.listdir("scan_result/")
        for scan_file in list_dir:
            try:
                with open(ROOT_DIR + "/" + f"{scan_file}", "r") as f:
                    report = f.read()

                lines = report.split("\n")

                vulners_line = [
                    line for line in lines if line.startswith("| vulners:")
                ][0]

                vulners_data = [
                    line
                    for line in lines[lines.index(vulners_line) + 1 :]
                    if line.strip()
                ]

                for data in vulners_data:
                    data = data.replace("|", "").replace("\t", "")
                    try:
                        data = data.replace("_", " ")
                    except:
                        pass

                    if "https" in data:
                        data = data.split("https")[0]
                        match = re.search(r"\d{1}\.\d{1}", data)
                        if match:
                            cve = data[: match.start()]
                            cve = cve.strip()
                            score = match.group()
                            writer.writerow([cve, score])
            except Exception as e:
                pass
