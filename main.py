import subprocess
import re
import socket
import argparse
import os
import csv
import csv
import pandas as pd

ROOT_DIR = "scan_result"
SCAN_CVE_DIR = ROOT_DIR + "/cve_scan"

matrices = [
            {'name': 'NIST', 'low': 0.0, 'medium': 4.0, 'high': 7.0},
            {'name': 'FAIR', 'low': 0.0, 'medium': 5.0, 'high': 9.0},
            {'name': 'MITRE', 'low': 0.0, 'medium': 4.0, 'high': 7.0},
            {'name': 'Other', 'low': 1.0, 'medium': 6.0, 'high': 8.0},
        ]

nist_scores = {'low': 0, 'medium': 0, 'high': 0}
fair_scores = {'low': 0, 'medium': 0, 'high': 0}
mitre_scores = {'low': 0, 'medium': 0, 'high': 0}
other_scores = {'low': 0, 'medium': 0, 'high': 0}

def risk_assessment():
    print("Start risk assessment")
    print("="*50)
    with open(SCAN_CVE_DIR + "/" + "scan_result.csv", 'r') as f:
        reader = csv.DictReader(f)
        df = pd.read_csv(SCAN_CVE_DIR + "/" + "scan_result.csv")
        print(df)

        for row in reader:
            cve = row['CVE']
            score = float(row['Score'])

            # Update scores for each matrix
            if score < matrices[0]['medium']:
                nist_scores['low'] += 1
            elif score < matrices[0]['high']:
                nist_scores['medium'] += 1
            else:
                nist_scores['high'] += 1

            if score < matrices[1]['medium']:
                fair_scores['low'] += 1
            elif score < matrices[1]['high']:
                fair_scores['medium'] += 1
            else:
                fair_scores['high'] += 1

            if score < matrices[2]['medium']:
                mitre_scores['low'] += 1
            elif score < matrices[2]['high']:
                mitre_scores['medium'] += 1
            else:
                mitre_scores['high'] += 1

            if score < matrices[3]['medium']:
                other_scores['low'] += 1
            elif score < matrices[3]['high']:
                other_scores['medium'] += 1
            else:
                other_scores['high'] += 1

        print(f"{'':20} {'Low':<10} {'Medium':<10} {'High':<10}")

        for matrix in matrices:
            name = matrix['name']
            low = matrix['low']
            medium = matrix['medium']
            high = matrix['high']

            if name == 'NIST':
                scores = nist_scores
            elif name == 'FAIR':
                scores = fair_scores
            elif name == 'MITRE':
                scores = mitre_scores
            else:
                scores = other_scores

            print(f"{name:20} {scores['low']:<10} {scores['medium']:<10} {scores['high']:<10}")

        
def cve_scan():
    with open(SCAN_CVE_DIR + "/" + "scan_result.csv", "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["CVE", "Score"])
        list_dir = os.listdir("scan_result/")
        for scan_file in list_dir:
            try:
                with open(ROOT_DIR + "/" + f'{scan_file}', 'r') as f:
                    report = f.read()

                lines = report.split("\n")

                vulners_line = [line for line in lines if line.startswith("| vulners:")][0]

                vulners_data = [line for line in lines[lines.index(vulners_line)+1:] if line.strip()]

                for data in vulners_data:
                    data = data.replace("|", "").replace("\t", "")
                    try: 
                        data = data.replace("_", " ")
                    except:
                        pass
                    
                    if "https" in data:
                        data = data.split("https")[0]
                        match = re.search(r"\d{1}\.\d{1}", data)
                        if match:
                            cve = data[:match.start()]
                            cve = cve.strip()
                            score = match.group()
                            writer.writerow([cve, score])
            except Exception as e:
                pass
    
    
    

def create_dir():
    if not os.path.exists(ROOT_DIR):
        os.mkdir(ROOT_DIR)
    if not os.path.exists(SCAN_CVE_DIR):
        os.mkdir(SCAN_CVE_DIR)

def nmap_scan(scan_type, target, output_file):
    with open(ROOT_DIR + f"/{output_file}", "a") as f:
        scan_result = subprocess.run(f"nmap {scan_type} {target}", shell=True, capture_output=True, text=True)
        f.write("-"*50)
        f.write(f"\nScanning {target} with {scan_type}\n")
        f.write(scan_result.stdout)
    

def main(targets):
    scan_type = ["-sV --script vuln",
                 "-sS --script ssl-enum-ciphers",
                 "--script=http-vul*",
                 "--script ssl-enum-ciphers", 
                 "--script ssl-cert",
                 "--script ssl-heartbleed",
                 "-p 1-65535 -sV -sS -A --script vuln"]


    i = 1
    for target in targets:
        j = 1
        for scan in scan_type:
            print(f"Scanning {target}. It will take some Time......", end="\r", flush=True)
            nmap_scan(scan, target, f"scan{i}_{j}.txt")
            j += 1
        i += 1    

if __name__ == "__main__":
    create_dir()
    parser = argparse.ArgumentParser(description="Nmap Scan")
    parser.add_argument("-t", "--targets", help="Target IP address or domain name (Only One)", nargs="+", required=True)
    args = parser.parse_args()

    target_list = []
    ip_address_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'

    for target in args.targets:
        if re.match(ip_address_pattern, target):
            target_list.append(target)
        else:
            try:
                if target.startswith("http"):
                    target = target.split("//")[1]
                    target_list.append(socket.gethostbyname(target))
                elif target.startswith("https"):
                    target = target.split("//")[1]
                    target_list.append(socket.gethostbyname(target))
                elif target.startswith("www"):
                    target = target.split("www.")[1]
                    target_list.append(socket.gethostbyname(target))
                else:
                    try:
                        target_list.append(socket.gethostbyname(target))
                    except Exception as e:
                        print(f"Error: {e}")
            except Exception as e:
                print(f"Error: {e}")

    main(target_list) 
    cve_scan()
    risk_assessment()